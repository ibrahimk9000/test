swagger: "2.0"
info:
  version: "0.1.0"
  title: "qvntra"
basePath: "/"
schemes: 
  - http

paths: 
  "/recent_payload":
    get:
      consumes:
        - "application/json"
      produces:
        - application/json"
      parameters:
        - name: "user_id"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            type: object
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                - method.response.header.operator: "integration.response.body.op"
                  method.response.header.operand_2: "integration.response.body.b"
                  method.response.header.operand_1: "integration.response.body.a"
              responseTemplates:
                - application/json: 
                    "#set($res = $input.path('$'))\n{\n   \"body\" : \"$res.body\",\n }"
          uri: ${uri_recent_payload}
          passthroughBehavior: "WHEN_NO_TEMPLATES"
          httpMethod: "POST"
          requestTemplates:
            application/json: |
              {"queryStringParameters": {#foreach($key in $input.params().querystring.keySet())#if($foreach.index > 0),#end"$key":"$input.params().querystring.get($key)"#end}}
          type: "aws"

  "/baseline":
    get:
      consumes:
        - "application/json"
      produces:
        - application/json"
      parameters:
        - name: "user_id"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            type: object
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                - method.response.header.operator: "integration.response.body.op"
                  method.response.header.operand_2: "integration.response.body.b"
                  method.response.header.operand_1: "integration.response.body.a"
              responseTemplates:
                - application/json: 
                    "#set($res = $input.path('$'))\n{\n   \"body\" : \"$res.body\",\n }"
          uri: ${uri_fetch_baseline}
          passthroughBehavior: "WHEN_NO_TEMPLATES"
          httpMethod: "POST"
          requestTemplates:
            application/json: |
              {"queryStringParameters": {#foreach($key in $input.params().querystring.keySet())#if($foreach.index > 0),#end"$key":"$input.params().querystring.get($key)"#end}}
          type: "aws"

  "/lastseen":
    get:
      consumes:
        - "application/json"
      produces:
        - application/json"
      parameters:
        - name: "user_id"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            type: object
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                - method.response.header.operator: "integration.response.body.op"
                  method.response.header.operand_2: "integration.response.body.b"
                  method.response.header.operand_1: "integration.response.body.a"
              responseTemplates:
                - application/json: 
                    "#set($res = $input.path('$'))\n{\n   \"body\" : \"$res.body\",\n }"
          uri: ${uri_fetch_lastseen}
          passthroughBehavior: "WHEN_NO_TEMPLATES"
          httpMethod: "POST"
          requestTemplates:
            application/json: |
              {"queryStringParameters": {#foreach($key in $input.params().querystring.keySet())#if($foreach.index > 0),#end"$key":"$input.params().querystring.get($key)"#end}}
          type: "aws"

  "/all_average":
    get:
      consumes:
        - "application/json"
      produces:
        - application/json"
      parameters:
        - name: "user_id"
          in: "query"
          required: true
          type: "string"
        - name: "period"
          in: "query"
          required: true
          type: "string"
        - name: "sensor"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            type: object
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                - method.response.header.operator: "integration.response.body.op"
                  method.response.header.operand_2: "integration.response.body.b"
                  method.response.header.operand_1: "integration.response.body.a"
              responseTemplates:
                - application/json: 
                    "#set($res = $input.path('$'))\n{\n   \"body\" : \"$res.body\",\n }"
          uri: ${uri_fetch_all_average}
          passthroughBehavior: "WHEN_NO_TEMPLATES"
          httpMethod: "POST"
          requestTemplates:
            application/json: |
              {"queryStringParameters": {#foreach($key in $input.params().querystring.keySet())#if($foreach.index > 0),#end"$key":"$input.params().querystring.get($key)"#end}}
          type: "aws"

  "/all":
    get:
      consumes:
        - "application/json"
      produces:
        - application/json"
      parameters:
        - name: "user_id"
          in: "query"
          required: true
          type: "string"
        - name: "period"
          in: "query"
          required: true
          type: "string"
        - name: "sensor"
          in: "query"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            type: array
      x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
      x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                - method.response.header.operator: "integration.response.body.op"
                  method.response.header.operand_2: "integration.response.body.b"
                  method.response.header.operand_1: "integration.response.body.a"
              responseTemplates:
                - application/json: 
                    "#set($res = $input.path('$'))\n{\n   \"body\" : \"$res.body\",\n }"
          uri: ${uri_fetch_all}
          passthroughBehavior: "WHEN_NO_TEMPLATES"
          httpMethod: "POST"
          requestTemplates:
            application/json: |
              {"queryStringParameters": {#foreach($key in $input.params().querystring.keySet())#if($foreach.index > 0),#end"$key":"$input.params().querystring.get($key)"#end}}
          type: "aws"


x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
  
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
